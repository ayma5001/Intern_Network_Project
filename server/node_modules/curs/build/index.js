"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Scene = void 0;
var THREE = __importStar(require("three"));
var Scene = /** @class */ (function () {
    function Scene(options) {
        this.audioListener = new THREE.AudioListener();
        this.refs = {};
        this.loading = { total: 0, count: 0, progress: "0%" };
        this.tasks = [];
        this.context = options.context ? options.context : {};
        this.ready = options.ready ? options.ready : function () { };
        this.scene = new THREE.Scene();
        this.camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 300);
        this.renderer = new THREE.WebGLRenderer({
            antialias: true,
            alpha: false,
        });
        this.renderer.setPixelRatio(window.devicePixelRatio);
        this.renderer.setSize(window.innerWidth, window.innerHeight);
        var config = this._config(options.config);
        this.camera.position.set(config.camera.position.x, config.camera.position.y, config.camera.position.z);
        this.camera.lookAt(config.camera.lookAt.x, config.camera.lookAt.y, config.camera.lookAt.z);
        if (config.shadow) {
            this.renderer.shadowMap.enabled = true;
            this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;
        }
        var container = document.querySelector("#app");
        container ? "" : container = document.body;
        this.container = container;
        this.loadDom = this._loading();
        this.container.appendChild(this.renderer.domElement);
        this._windowResize();
        this._update();
    }
    Scene.prototype._config = function (options) {
        var config = {
            shadow: false,
            camera: {
                position: { x: 0, y: 0, z: 1 },
                lookAt: { x: 0, y: 0, z: 0 }
            },
        };
        if (options) {
            options.shadow ? config.shadow = true : "";
            if (options.camera) {
                options.camera.position ? config.camera.position = options.camera.position : "";
                options.camera.lookAt ? config.camera.lookAt = options.camera.lookAt : "";
            }
        }
        return config;
    };
    Scene.prototype._loading = function () {
        var div = document.createElement("div");
        var style = "\n        position:absolute;\n        top:0;\n        left:0;\n        width:100%;\n        height:100%;\n        background-color:#3ab8df;\n        z-index:999;\n        display:flex;\n        flex-direction: column;\n        justify-content: center;\n        align-items: center;\n        color:#ffffff;\n        font-size:28px;\n        font-weight:bold;\n        ";
        div.setAttribute("style", style);
        var _this = this;
        Object.defineProperty(this.loading, "progress", {
            get: function () { },
            set: function (val) {
                div.innerHTML = "<div>\u52A0\u8F7D\u4E2D...</div><div>" + val + "</div>";
                val === "100%" ? _this.container.removeChild(div) : "";
                return val;
            }
        });
        div.innerText = "0%";
        this.container.appendChild(div);
        return div;
    };
    Scene.prototype._windowResize = function () {
        var _this_1 = this;
        window.addEventListener("resize", function () {
            _this_1.camera.aspect = window.innerWidth / window.innerHeight;
            _this_1.camera.updateProjectionMatrix();
            _this_1.renderer.setSize(window.innerWidth, window.innerHeight);
        });
    };
    Scene.prototype._update = function () {
        var _this_1 = this;
        requestAnimationFrame(function () { _this_1._update(); });
        this.tasks.forEach(function (task) {
            task.update();
        });
        this.renderer.render(this.scene, this.camera);
    };
    Scene.prototype.add = function (object3D) {
        this.scene.add(object3D);
    };
    Scene.prototype.update = function (task, add) {
        if (add === void 0) { add = true; }
        var isExist = false;
        var index = 0;
        for (var i = 0; i < this.tasks.length; i++) {
            if (task.uuid === this.tasks[i].uuid) {
                isExist = true;
                index = i;
                break;
            }
        }
        if (add) {
            isExist ? "" : this.tasks.push(task);
        }
        else {
            isExist ? this.tasks.splice(index, 1) : "";
        }
    };
    return Scene;
}());
exports.Scene = Scene;
