"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Compiler = exports.TagTree = void 0;
var TagTree = /** @class */ (function () {
    function TagTree(tag, attrs, parent) {
        this.parent = null;
        this.children = [];
        this.tag = tag;
        this.attrs = attrs;
        this.parent = parent ? parent : null;
        if (this.parent) {
            this.parent.children.push(this);
        }
    }
    return TagTree;
}());
exports.TagTree = TagTree;
var Compiler = /** @class */ (function () {
    function Compiler() {
        //render
        this._note = /^<!--/; //注释
        this._tag = /^<[^>]+>/; //标签
        this._endTag = /^<\/[^>]+>/; //结束标签
        this._tagStart = /^<[^\s>]+/;
        this._attribute = /^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;
        this._event = /[\s\S]*\([^\)]*\)/;
        this._nowTag = new TagTree("compiler", {}, null);
    }
    Compiler.prototype.parse = function (template) {
        while (template) {
            //文本
            var index = template.indexOf("<");
            if (index > 0) {
                var text = template.substr(0, index);
                var t = text.match(/\S+/);
                if (t) {
                    this._nowTag.attrs.text = t[0];
                }
                template = template.substr(index);
                continue;
            }
            else if (index < 0) {
                template = "";
                continue;
            }
            //注释
            var noteRes = template.match(this._note);
            if (noteRes) {
                var end = template.indexOf("-->");
                template = template.substr(end + 3);
                continue;
            }
            //标签
            var tagRes = template.match(this._tag);
            if (tagRes) {
                var tagStr = tagRes[0];
                var endRes = tagStr.match(this._endTag);
                if (endRes) {
                    this._closeTag();
                }
                else {
                    this._getTag(tagStr);
                }
                template = template.substr(tagStr.length);
            }
            else {
                throw new Error("模板无法解析:" + template);
            }
        }
        var tree = this._nowTag.children[0];
        if (!tree) {
            throw new Error("未从模板中解析到标签");
        }
        this._nowTag.children = [];
        return tree;
    };
    Compiler.prototype._getTag = function (tagStr) {
        var startRes = tagStr.match(this._tagStart);
        if (startRes) {
            var tag = startRes[0].substr(1, startRes[0].length);
            tagStr = tagStr.substr(startRes[0].length);
            var attrs = {};
            while (tagStr) {
                var attrsRes = tagStr.match(this._attribute);
                if (attrsRes) {
                    var attr = {
                        key: attrsRes[1],
                        value: attrsRes[3],
                    };
                    if (attr.value) {
                        this._getAttr(attr);
                        attrs[attr.key] = attr.value;
                    }
                    tagStr = tagStr.substr(attrsRes[0].length);
                }
                else {
                    break;
                }
            }
            this._nowTag = new TagTree(tag, attrs, this._nowTag);
        }
    };
    Compiler.prototype._getAttr = function (attr) {
        if (attr.key.indexOf(":") > -1) {
            attr.key = attr.key.split(":")[1];
            this._setAttrVal(attr);
        }
        else if (attr.key.indexOf("@") > -1) {
            attr.key = attr.key.split("@")[1];
            this._setAttrEvent(attr);
        }
    };
    Compiler.prototype._setAttrVal = function (attr) {
        if (attr.value === "true") {
            //boolean
            attr.value = true;
        }
        else if (attr.value === "false") {
            //boolean
            attr.value = false;
        }
        else if (attr.value.match(/^0x[a-z0-9]{6}$/)) {
            //color
        }
        else if (attr.value.match(/^-?\d*.?\d*$/)) {
            //number
        }
        else if (attr.value.match(/^\s*\(.*\)\s*$/)) {
            var start = attr.value.indexOf("(");
            attr.value = attr.value.substr(start + 1);
            var end = attr.value.lastIndexOf(")");
            attr.value = attr.value.substr(0, end);
            var list = attr.value.split(",");
            attr.value = { x: list[0], y: list[1], z: list[2] };
        }
        else if (attr.value) {
            attr.value = "scene.context." + attr.value;
        }
    };
    Compiler.prototype._setAttrEvent = function (attr) {
        var r = attr.value.match(this._event);
        if (r) {
            var list = r[0].split("(");
            attr.value = "scene.context." + list[0];
            list = list[1].split(")");
            attr.value += ".bind(scene " + (list[0] ? "," + list[0] : "") + ")";
        }
        else {
            attr.value = "scene.context." + attr.value + ".bind(scene)";
        }
    };
    Compiler.prototype._closeTag = function () {
        this._nowTag.parent ? this._nowTag = this._nowTag.parent : "";
    };
    return Compiler;
}());
exports.Compiler = Compiler;
