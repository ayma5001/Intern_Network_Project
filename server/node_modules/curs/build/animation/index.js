"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Animations = void 0;
var THREE = __importStar(require("three"));
var Animations = /** @class */ (function () {
    function Animations(model) {
        var _this = this;
        this.animations = [];
        this.clock = new THREE.Clock();
        this.loop = THREE.LoopRepeat;
        this.isPlay = false;
        this.active = 0;
        this.uuid = model.uuid;
        this.mixers = new THREE.AnimationMixer(model);
        model.animations.forEach(function (animation) {
            _this.animations.push(_this.mixers.clipAction(animation));
        });
    }
    Animations.prototype.play = function (active, count, end) {
        var _this = this;
        if (active === void 0) { active = 0; }
        if (count === void 0) { count = 1; }
        if (end === void 0) { end = function () { }; }
        this.isPlay = true;
        this.active = active;
        var animation = this.animations[this.active];
        animation.reset();
        animation.setLoop(this.loop, count);
        var cb = function () {
            end();
            _this.mixers.removeEventListener("finished", cb);
        };
        this.mixers.addEventListener("finished", cb);
        animation.play();
    };
    Animations.prototype.stop = function () {
        this.isPlay = false;
        this.animations[this.active].stop();
    };
    Animations.prototype.update = function () {
        this.mixers.update(this.clock.getDelta());
    };
    return Animations;
}());
exports.Animations = Animations;
